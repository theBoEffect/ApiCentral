openapi: 3.0.0
info:
  version: 1.0.0
  title: Boilerplate Service
  description: A Boilerplate for services that run in docker or lambda
  x-logo:
    url: https://cdn-images-1.medium.com/max/280/1*vuHoiLlmWjuTJ9zK98jFtQ@2x.png
tags:
  - name: System
    description: Basic system functionality
  - name: Specs
    description: Schema Registration and Crud
  - name: Settings
    description: Single tenant settings for the portal
  - name: Admins
    description: Locally defined Users who have admin access through basic auth. not recommended for a large number of users.

paths:
  /settings:
    get:
      tags:
        - Settings
      summary: Retrieve all portal settings
      description: Retrieve all portal settings. Remember this is a single tenant.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingObject'
      security:
        - Bearer: []
        - basicAuth: []
  /users:
    post:
      tags:
        - Admins
      summary: Add a new locally stored user
      description: Add a new locally stored user
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
        '400':
          description: Invalid request
        '403':
          description: Forbidden
        '417':
          description: Expectation failed - invalid openApi URL
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeUser'
        description: Schema data to be written
        required: true
    get:
      tags:
        - Admins
      summary: Retrieve all locally defined users
      description: Retrieve all locally defined users
      parameters:
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userObject'
      security:
        - Bearer: []
        - basicAuth: []
  '/users/{id}':
    get:
      tags:
        - Admins
      summary: Find a user with its ID
      description: Find a user with its ID
      parameters:
        - name: id
          in: path
          description: id of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
        '400':
          description: Invalid request
        '404':
          description: Not found
      security:
        - Bearer: []
        - basicAuth: []
    delete:
      tags:
        - Admins
      summary: Delete a user with its ID
      description: Delete a user with its ID
      parameters:
        - name: id
          in: path
          description: id of user to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userObject'
        '400':
          description: Invalid request
        '404':
          description: Not found
      security:
        - Bearer: []
        - basicAuth: []

  /schema:
    post:
      tags:
        - Specs
      summary: Add a new specification to be shown on the portal
      description: Add a new specification to be shown on the portal
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaObjects'
        '400':
          description: Invalid request
        '417':
          description: Expectation failed - invalid openApi URL
      security:
        - Bearer: []
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/writeSchemaObject'
        description: Schema data to be written
        required: true
    get:
      tags:
        - Specs
      summary: Retrieve all openApi specs to be shown
      description: Retrieve all openApi specs to be shown
      parameters:
        - name: $filter
          in: query
          description: oData filter Query
          required: false
          schema:
            type: string
        - name: $select
          in: query
          description: oData select Query
          required: false
          schema:
            type: string
        - name: $orderby
          in: query
          description: oData orderby Query
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: oData skip Query
          required: false
          schema:
            type: string
        - name: $top
          in: query
          description: oData top Query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaObjects'
  '/schema/{id}':
    get:
      tags:
        - Specs
      summary: Find a schema with its ID
      description: Find a schema with its ID
      parameters:
        - name: id
          in: path
          description: id of openApi schema to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaObject'
        '400':
          description: Invalid request
        '404':
          description: Not found
    patch:
      tags:
        - Specs
      summary: Patch an existing Schema definition
      description: Patch an existing Schema definition
      parameters:
        - name: id
          in: path
          description: id of the schema to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaObject'
        '400':
          description: Invalid request
      security:
        - Bearer: []
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jsonPatch'
        description: JSON Patch specific to your object
        required: true
    delete:
      tags:
        - Specs
      summary: Delete a schema with its ID
      description: Delete a schema with its ID
      parameters:
        - name: id
          in: path
          description: id of openApi schema to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaObject'
        '400':
          description: Invalid request
        '404':
          description: Not found
      security:
        - Bearer: []
        - basicAuth: []
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Health check
      responses:
        '200':
          description: GET successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success'
        '500':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultError'

servers:
  - url: http://localhost:3000/api
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: 'Simply enter the token (prefixing with "bearer" is not required).'
    basicAuth:
      type: http
      scheme: basic
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
  schemas:
    success:
      required:
        - err
        - message
      properties:
        err:
          type: string
        message:
          type: object

    defaultError:
      required:
        - err
        - message
      properties:
        err:
          type: integer
          format: int32
        message:
          type: string

    settingObject:
      type: object
      allOf:
        - $ref: '#/components/schemas/putSettingObject'
      properties:
        id:
          type: string
          description: guid value... this is a place holder in case we ever want to go mult-tenant. It is currently meaningless.
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time

    putSettingObject:
      type: object
      additionalProperties: false
      required:
        - company
      properties:
        company:
          type: string
          description: The name of the company or organization using the portal
        title:
          type: string
          description: The html title for the portal
        statement:
          type: string
          description: The additional brief statement coupled with the logo or company name. Usually 2 or 3 words.
        logoUrl:
          type: string
          description: URL of the logo hosted externally
        bannerTitle:
          type: string
          description: Header title on the portal banner
        bannerStatement:
          type: string
          description: Header statement under the header title on the portal banner
        bannerImage:
          type: string
          description: Banner image URL hosted externally
        infoBlocks:
          type: array
          items:
            type: object
            properties:
              image:
                type: string
                description: the thumbnail image that goes with the info block (a default will be selected)
              title:
                type: string
                description: the title of an info block
              body:
                type: string
                description: the body of an info block

    schemaObjects:
      type: array
      items:
        $ref: '#/components/schemas/schemaObject'

    schemaObject:
      type: object
      allOf:
        - $ref: '#/components/schemas/writeSchemaObject'
      properties:
        id:
          type: string
          description: A guid that represents this specific schema pointer
        created:
          type: string
          format: date-time
          description: creation time of this record
        modified:
          type: string
          format: date-time
          description: when this was modified last

    writeSchemaObject:
      type: object
      required:
        - apiSpecJsonUri
        - displayTitle
      properties:
        apiSpecJsonUri:
          type: string
          description: the url of the served openapi/swagger JSON (not the swagger UI)
        swaggerUiUrl:
          type: string
          description: the url of the swagger UI hosted if available
        displayTitle:
          type: string
          description: the title to display on the portal main page
        displayDescription:
          type: string
          description: the description to display on the portal main page

    writeUser:
      type: object
      additionalProperties: false
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: login email/username
        password:
          type: string
          format: password
          description: login password

    userObject:
      type: object
      allOf:
        - $ref: '#/components/schemas/writeUser'
      properties:
        created:
          type: string
          format: date-time
        id:
          type: string
          description: unique guid of the user


    jsonPatch:
      additionalProperties: false
      description: Details for JSONPatch can be found at http://jsonpatch.com/
      type: array
      items:
        type: object
        description: Reference the update model for the full paths to update
        oneOf:
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: object
                description: 'The object, array or object to set the property at the above path to'
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: string
                description: 'The string, array or object to set the property at the above path to'
          - required:
              - op
              - path
              - value
            properties:
              op:
                type: string
                enum: ['replace', 'add', 'move', 'copy', 'test']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'
              value:
                type: integer
                description: 'The integer, array or object to set the property at the above path to'
          - required:
              - op
              - path
            properties:
              op:
                type: string
                enum: ['remove']
              path:
                type: string
                description: 'A path to the property in the data model. For example /name/firstName or /emails/-'